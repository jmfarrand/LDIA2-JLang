/* Generated By:JJTree&JavaCC: Do not edit this line. Jlang.java */
package parser.ast;

public class Jlang/*@bgen(jjtree)*/implements JlangTreeConstants, JlangConstants {/*@bgen(jjtree)*/
  protected JJTJlangState jjtree = new JJTJlangState();

/***********************************************
 *          THE GRAMMAR STARTS HERE            *
 ***********************************************/
  final public ASTCode code() throws ParseException {
 /*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      statement();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case SWITCH:
        case WRITE:
        case FN:
        case INT:
        case STRING:
        case FLOAT:
        case BOOL:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        statement();
      }
      jj_consume_token(0);
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                if (jjtc000) {
                                  jjtree.clearNodeScope(jjtn000);
                                  jjtc000 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte000 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte000;}
                                }
                                if (jjte000 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte000;}
                                }
                                {if (true) throw (Error)jjte000;}
    } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
    }
    throw new Error("Missing return statement in function");
  }

  final public void statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FN:
          fndef();
          break;
        case LBRACE:
          block();
          break;
        case IF:
          ifstatement();
          break;
        case FOR:
          forloop();
          break;
        case WHILE:
          whileLoop();
          break;
        case SWITCH:
          switchStatement();
          break;
        case WRITE:
          write();
          break;
        case IDENTIFIER:
          call();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case SWITCH:
        case WRITE:
        case FN:
        case INT:
        case STRING:
        case FLOAT:
        case BOOL:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        statement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void parmlist() throws ParseException {
 /*@bgen(jjtree) Parmlist */
  ASTParmlist jjtn000 = new ASTParmlist(JJTPARMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          identifier();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void fnbody() throws ParseException {
 /*@bgen(jjtree) FnBody */
  ASTFnBody jjtn000 = new ASTFnBody(JJTFNBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case SWITCH:
        case WRITE:
        case FN:
        case INT:
        case STRING:
        case FLOAT:
        case BOOL:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        statement();
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void fndef() throws ParseException {
 /*@bgen(jjtree) FnDef */
  ASTFnDef jjtn000 = new ASTFnDef(JJTFNDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FN);
      identifier();
      parmlist();
      jj_consume_token(LBRACE);
      fnbody();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        returnexpr();
                                                                         jjtn000.fnHasReturn = true;
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void returnexpr() throws ParseException {
 /*@bgen(jjtree) ReturnExpression */
  ASTReturnExpression jjtn000 = new ASTReturnExpression(JJTRETURNEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

//Assignment definition has been edited to reflect the static typing for Jlang.
  final public void assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      jj_consume_token(ASSIGN);
                                                           ASTAssignment jjtn001 = new ASTAssignment(JJTASSIGNMENT);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
      try {
        expression();
      } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             {if (true) throw (RuntimeException)jjte001;}
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte001;}
                                                           }
                                                           {if (true) throw (Error)jjte001;}
      } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
      }
      break;
    case INT:
      jj_consume_token(INT);
      identifier();
      jj_consume_token(ASSIGN);
                                                                 ASTAssignmentInteger jjtn002 = new ASTAssignmentInteger(JJTASSIGNMENTINTEGER);
                                                                 boolean jjtc002 = true;
                                                                 jjtree.openNodeScope(jjtn002);
      try {
        expression();
      } catch (Throwable jjte002) {
                                                                 if (jjtc002) {
                                                                   jjtree.clearNodeScope(jjtn002);
                                                                   jjtc002 = false;
                                                                 } else {
                                                                   jjtree.popNode();
                                                                 }
                                                                 if (jjte002 instanceof RuntimeException) {
                                                                   {if (true) throw (RuntimeException)jjte002;}
                                                                 }
                                                                 if (jjte002 instanceof ParseException) {
                                                                   {if (true) throw (ParseException)jjte002;}
                                                                 }
                                                                 {if (true) throw (Error)jjte002;}
      } finally {
                                                                 if (jjtc002) {
                                                                   jjtree.closeNodeScope(jjtn002,  2);
                                                                 }
      }
      break;
    case STRING:
      jj_consume_token(STRING);
      identifier();
      jj_consume_token(ASSIGN);
                                                                    ASTAssignmentString jjtn003 = new ASTAssignmentString(JJTASSIGNMENTSTRING);
                                                                    boolean jjtc003 = true;
                                                                    jjtree.openNodeScope(jjtn003);
      try {
        expression();
      } catch (Throwable jjte003) {
                                                                    if (jjtc003) {
                                                                      jjtree.clearNodeScope(jjtn003);
                                                                      jjtc003 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte003 instanceof RuntimeException) {
                                                                      {if (true) throw (RuntimeException)jjte003;}
                                                                    }
                                                                    if (jjte003 instanceof ParseException) {
                                                                      {if (true) throw (ParseException)jjte003;}
                                                                    }
                                                                    {if (true) throw (Error)jjte003;}
      } finally {
                                                                    if (jjtc003) {
                                                                      jjtree.closeNodeScope(jjtn003,  2);
                                                                    }
      }
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      identifier();
      jj_consume_token(ASSIGN);
                                                                   ASTAssignmentFloat jjtn004 = new ASTAssignmentFloat(JJTASSIGNMENTFLOAT);
                                                                   boolean jjtc004 = true;
                                                                   jjtree.openNodeScope(jjtn004);
      try {
        expression();
      } catch (Throwable jjte004) {
                                                                   if (jjtc004) {
                                                                     jjtree.clearNodeScope(jjtn004);
                                                                     jjtc004 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte004 instanceof RuntimeException) {
                                                                     {if (true) throw (RuntimeException)jjte004;}
                                                                   }
                                                                   if (jjte004 instanceof ParseException) {
                                                                     {if (true) throw (ParseException)jjte004;}
                                                                   }
                                                                   {if (true) throw (Error)jjte004;}
      } finally {
                                                                   if (jjtc004) {
                                                                     jjtree.closeNodeScope(jjtn004,  2);
                                                                   }
      }
      break;
    case BOOL:
      jj_consume_token(BOOL);
      identifier();
      jj_consume_token(ASSIGN);
                                                                  ASTAssignmentBoolean jjtn005 = new ASTAssignmentBoolean(JJTASSIGNMENTBOOLEAN);
                                                                  boolean jjtc005 = true;
                                                                  jjtree.openNodeScope(jjtn005);
      try {
        expression();
      } catch (Throwable jjte005) {
                                                                  if (jjtc005) {
                                                                    jjtree.clearNodeScope(jjtn005);
                                                                    jjtc005 = false;
                                                                  } else {
                                                                    jjtree.popNode();
                                                                  }
                                                                  if (jjte005 instanceof RuntimeException) {
                                                                    {if (true) throw (RuntimeException)jjte005;}
                                                                  }
                                                                  if (jjte005 instanceof ParseException) {
                                                                    {if (true) throw (ParseException)jjte005;}
                                                                  }
                                                                  {if (true) throw (Error)jjte005;}
      } finally {
                                                                  if (jjtc005) {
                                                                    jjtree.closeNodeScope(jjtn005,  2);
                                                                  }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//If statement definition. Has been edited to include elseif definition.
  final public void ifstatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      statement();
      jj_consume_token(RBRACE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(ELSEIF);
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        statement();
        jj_consume_token(RBRACE);
                                                                                              jjtn000.ifHasElseIf = true;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(LBRACE);
        statement();
        jj_consume_token(RBRACE);
                                                                                   jjtn000.ifHasElse = true;
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void forloop() throws ParseException {
 /*@bgen(jjtree) ForLoop */
  ASTForLoop jjtn000 = new ASTForLoop(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      assignment();
      jj_consume_token(SEMICOLON);
      expression();
      jj_consume_token(SEMICOLON);
      assignment();
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

//While loop definition
  final public void whileLoop() throws ParseException {
 /*@bgen(jjtree) WhileLoop */
  ASTWhileLoop jjtn000 = new ASTWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

//Switch statement
  final public void switchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      jj_consume_token(CASE);
      expression();
      jj_consume_token(63);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case SWITCH:
        case WRITE:
        case FN:
        case INT:
        case STRING:
        case FLOAT:
        case BOOL:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        statement();
      }
      jj_consume_token(BREAK);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        jj_consume_token(CASE);
        expression();
        jj_consume_token(63);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case FOR:
          case WHILE:
          case SWITCH:
          case WRITE:
          case FN:
          case INT:
          case STRING:
          case FLOAT:
          case BOOL:
          case IDENTIFIER:
          case LBRACE:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          statement();
        }
        jj_consume_token(BREAK);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SWITCHDEFAULT:
        jj_consume_token(SWITCHDEFAULT);
        jj_consume_token(63);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case FOR:
          case WHILE:
          case SWITCH:
          case WRITE:
          case FN:
          case INT:
          case STRING:
          case FLOAT:
          case BOOL:
          case IDENTIFIER:
          case LBRACE:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_9;
          }
          statement();
        }
        jj_consume_token(BREAK);
                                                                                                 jjtn000.switchHasDefault = true;
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void write() throws ParseException {
    jj_consume_token(WRITE);
                                                  ASTWrite jjtn001 = new ASTWrite(JJTWRITE);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
    try {
      expression();
    } catch (Throwable jjte001) {
                                                  if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte001;}
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte001;}
                                                  }
                                                  {if (true) throw (Error)jjte001;}
    } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  1);
                                                  }
    }
  }

  final public void call() throws ParseException {
 /*@bgen(jjtree) Call */
  ASTCall jjtn000 = new ASTCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      arglist();
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void arglist() throws ParseException {
 /*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case PLUS:
      case SUBT:
        expression();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        expression();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

//
// Expressions
//
  final public void expression() throws ParseException {
    or_expression();
  }

  final public void or_expression() throws ParseException {
    and_expression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      jj_consume_token(OR);
                                                        ASTOrExpression jjtn001 = new ASTOrExpression(JJTOREXPRESSION);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
      try {
        and_expression();
      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte001;}
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte001;}
                                                        }
                                                        {if (true) throw (Error)jjte001;}
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
      }
    }
  }

  final public void and_expression() throws ParseException {
    compare_expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      jj_consume_token(AND);
                                                             ASTAndExpression jjtn001 = new ASTAndExpression(JJTANDEXPRESSION);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
      try {
        compare_expression();
      } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte001;}
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte001;}
                                                             }
                                                             {if (true) throw (Error)jjte001;}
      } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                             }
      }
    }
  }

  final public void compare_expression() throws ParseException {
    add_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case LE:
    case GE:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                                         ASTComparisonEqual jjtn001 = new ASTComparisonEqual(JJTCOMPARISONEQUAL);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          add_expression();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
        break;
      case NE:
        jj_consume_token(NE);
                                        ASTComparisonNotEqualTo jjtn002 = new ASTComparisonNotEqualTo(JJTCOMPARISONNOTEQUALTO);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
          add_expression();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
      case GE:
        jj_consume_token(GE);
                                        ASTComparisonGreatorThanOrEqualTo jjtn003 = new ASTComparisonGreatorThanOrEqualTo(JJTCOMPARISONGREATORTHANOREQUALTO);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
        try {
          add_expression();
        } catch (Throwable jjte003) {
                                        if (jjtc003) {
                                          jjtree.clearNodeScope(jjtn003);
                                          jjtc003 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte003 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte003;}
                                        }
                                        if (jjte003 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte003;}
                                        }
                                        {if (true) throw (Error)jjte003;}
        } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                        }
        }
        break;
      case LE:
        jj_consume_token(LE);
                                        ASTComparisonLessThanOrEqualTo jjtn004 = new ASTComparisonLessThanOrEqualTo(JJTCOMPARISONLESSTHANOREQUALTO);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
        try {
          add_expression();
        } catch (Throwable jjte004) {
                                        if (jjtc004) {
                                          jjtree.clearNodeScope(jjtn004);
                                          jjtc004 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte004 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte004;}
                                        }
                                        if (jjte004 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte004;}
                                        }
                                        {if (true) throw (Error)jjte004;}
        } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004,  2);
                                        }
        }
        break;
      case GT:
        jj_consume_token(GT);
                                        ASTComparisonGreatorThan jjtn005 = new ASTComparisonGreatorThan(JJTCOMPARISONGREATORTHAN);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
        try {
          add_expression();
        } catch (Throwable jjte005) {
                                        if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte005;}
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte005;}
                                        }
                                        {if (true) throw (Error)jjte005;}
        } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
        }
        break;
      case LT:
        jj_consume_token(LT);
                                        ASTComparisonLessThan jjtn006 = new ASTComparisonLessThan(JJTCOMPARISONLESSTHAN);
                                        boolean jjtc006 = true;
                                        jjtree.openNodeScope(jjtn006);
        try {
          add_expression();
        } catch (Throwable jjte006) {
                                        if (jjtc006) {
                                          jjtree.clearNodeScope(jjtn006);
                                          jjtc006 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte006 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte006;}
                                        }
                                        if (jjte006 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte006;}
                                        }
                                        {if (true) throw (Error)jjte006;}
        } finally {
                                        if (jjtc006) {
                                          jjtree.closeNodeScope(jjtn006,  2);
                                        }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void add_expression() throws ParseException {
    mul_expression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case SUBT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                         ASTAddOperator jjtn001 = new ASTAddOperator(JJTADDOPERATOR);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          mul_expression();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
        break;
      case SUBT:
        jj_consume_token(SUBT);
                                         ASTSubtractOperator jjtn002 = new ASTSubtractOperator(JJTSUBTRACTOPERATOR);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
        try {
          mul_expression();
        } catch (Throwable jjte002) {
                                         if (jjtc002) {
                                           jjtree.clearNodeScope(jjtn002);
                                           jjtc002 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte002 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte002;}
                                         }
                                         if (jjte002 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte002;}
                                         }
                                         {if (true) throw (Error)jjte002;}
        } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  2);
                                         }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void mul_expression() throws ParseException {
    unary_expression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                                        ASTTimesOperator jjtn001 = new ASTTimesOperator(JJTTIMESOPERATOR);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
        try {
          unary_expression();
        } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
                                        ASTDivideOperator jjtn002 = new ASTDivideOperator(JJTDIVIDEOPERATOR);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
        try {
          unary_expression();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void unary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                                      ASTUnaryNotOperator jjtn001 = new ASTUnaryNotOperator(JJTUNARYNOTOPERATOR);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
        unary_expression();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
      }
      break;
    case PLUS:
      jj_consume_token(PLUS);
                                      ASTUnaryPlusOperator jjtn002 = new ASTUnaryPlusOperator(JJTUNARYPLUSOPERATOR);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
      try {
        unary_expression();
      } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
      } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  1);
                                      }
      }
      break;
    case SUBT:
      jj_consume_token(SUBT);
                                      ASTUnaryMinusOperator jjtn003 = new ASTUnaryMinusOperator(JJTUNARYMINUSOPERATOR);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
      try {
        unary_expression();
      } catch (Throwable jjte003) {
                                      if (jjtc003) {
                                        jjtree.clearNodeScope(jjtn003);
                                        jjtc003 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte003 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte003;}
                                      }
                                      if (jjte003 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte003;}
                                      }
                                      {if (true) throw (Error)jjte003;}
      } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003,  1);
                                      }
      }
      break;
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      primary_expression();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void primary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      literal();
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_2(2)) {
        fn_invoke();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          dereference();
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          expression();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void fn_invoke() throws ParseException {
 /*@bgen(jjtree) FnInvoke */
  ASTFnInvoke jjtn000 = new ASTFnInvoke(JJTFNINVOKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      arglist();
    } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte000;}
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte000;}
                                                          }
                                                          {if (true) throw (Error)jjte000;}
    } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                          }
    }
  }

  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      integer();
      break;
    case STRING_LITERAL:
      character();
      break;
    case FLOATING_POINT_LITERAL:
      rational();
      break;
    case TRUE:
    case FALSE:
      bool();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void dereference() throws ParseException {
 /*@bgen(jjtree) Dereference */
 ASTDereference jjtn000 = new ASTDereference(JJTDEREFERENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void character() throws ParseException {
 /*@bgen(jjtree) Character */
 ASTCharacter jjtn000 = new ASTCharacter(JJTCHARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void integer() throws ParseException {
 /*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void rational() throws ParseException {
 /*@bgen(jjtree) Rational */
 ASTRational jjtn000 = new ASTRational(JJTRATIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.tokenValue = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void bool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
                                ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
      }
      break;
    case FALSE:
                    ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(INT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(BOOL)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(FLOAT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(STRING)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JlangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e063900,0x63900,0x1e063900,0x0,0x0,0x1e063900,0x80000,0x1e000000,0x200,0x400,0x1e063900,0x4000,0x1e063900,0x1e063900,0x8000,0x21c00000,0x0,0x100000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x21c00000,0x21800000,0x0,0x21800000,0x1800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x210,0x210,0x210,0x4000,0x10,0x210,0x0,0x10,0x0,0x0,0x210,0x0,0x210,0x210,0x0,0xc00009a,0x4000,0x0,0x0,0x3f00000,0x3f00000,0xc000000,0xc000000,0x30000000,0x30000000,0xc00009a,0xa,0x90,0xa,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Jlang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jlang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JlangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Jlang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JlangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Jlang(JlangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JlangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
